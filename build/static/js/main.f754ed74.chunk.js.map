{"version":3,"sources":["components/Title.js","components/Spinner.js","components/Form.js","components/Footer.js","App.js","serviceWorker.js","index.js","image/cat.png"],"names":["Title","className","src","cat","alt","style","height","width","Spinner","Form","state","number","UponSubmit","e","preventDefault","fetch","props","onSubmit","this","type","value","min","max","required","onChange","event","setState","target","React","Component","Footer","App","fetchData","num","then","res","json","isLoaded","facts","error","displayData","role","message","map","key","_id","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","module","exports"],"mappings":"+MAoBeA,EAjBD,WACZ,OACE,yBAAKC,UAAU,SACb,6BAAK,wBAAIA,UAAU,UAAd,aACL,yBAAKA,UAAU,SACf,yBACEC,IAAKC,IACLC,IAAI,UACJH,UAAU,eACVI,MAAQ,CAACC,OAAQ,QAASC,MAAO,YAGnC,uBAAGN,UAAU,aAAb,uCCXSO,G,MAFC,kBAAM,yBAAKP,UAAU,iCC2CtBQ,E,4MA1CbC,MAAQ,CAAEC,OAAQ,G,EAElBC,WAAa,SAAAC,GACXA,EAAEC,kBAGFC,EAFkB,EAAKC,MAAfD,OAED,EAAKL,MAAMC,S,uDAGV,IAAD,OACP,OACE,yBAAKV,UAAU,cACb,0BAAOgB,SAAUC,KAAKN,YACpB,2BAAOX,UAAW,iBAAlB,4BACA,6BACA,6BACA,2BACIA,UAAU,WACVkB,KAAK,SACLC,MAAOF,KAAKR,MAAMC,OAClBU,IAAI,IACJC,IAAI,KACJC,UAAU,EACVC,SAAU,SAAAC,GAAK,OAAI,EAAKC,SAAS,CAAEf,OAAQc,EAAME,OAAOP,YAG5D,6BACA,6BACA,4BAAQnB,UAAY,gBAApB,0C,GA7BS2B,IAAMC,WCQVC,EAPA,WACX,OACI,yBAAK7B,UAAU,UAAf,gCC0FO8B,E,kDAvFb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAURgB,UAAY,WAAe,IAAdC,EAAa,uDAAP,EACjBlB,MAAM,sEAAD,OACmEkB,IAErEC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAE,GACE,EAAKV,SAAS,CACZW,UAAU,EACVC,MAAOF,OAGX,SAAAG,GACE,EAAKb,SAAS,CACZW,UAAU,EACVE,cA1BS,EAgCnBC,YAAc,WAAO,IAAD,EACiB,EAAK9B,MAAhC2B,EADU,EACVA,SAAUC,EADA,EACAA,MAAOC,EADP,EACOA,MACzB,OAAIA,EAEA,yBAAKtC,UAAU,qBAAqBwC,KAAK,SAAzC,UACUF,EAAMG,SAGRL,EASR,yBAAKpC,UAAU,OACZqC,EAAMK,KAAI,SAAAL,GAAK,OACd,yBAAKrC,UAAU,YAAY2C,IAAKN,EAAMO,KACpC,wBAAI5C,UAAU,cACZ,wBAAIA,UAAU,2CACXqC,EAAMQ,MAET,wBAAI7C,UAAU,6CAAd,+CAC2CqC,EAAMO,YAfzD,6BACG,IACD,kBAAC,EAAD,QA1CN,EAAKnC,MAAQ,CACX6B,MAAO,KACPD,MAAO,GACPD,UAAU,GALK,E,gEASjBnB,KAAKc,c,+BA4DL,OACE,yBAAK/B,UAAU,cACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMc,MAAOG,KAAKc,YAElB,6BAAMd,KAAKsB,gBAGX,kBAAC,EAAD,W,GA/EQX,a,MCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMG,a,kBEzI5BsB,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.f754ed74.chunk.js","sourcesContent":["import React from \"react\";\nimport cat from \"../image/cat.png\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <div><h1 className=\"header\">Cat Fact</h1></div>\n      <div className=\"image\">\n      <img\n        src={cat}\n        alt=\"cat_pic\"\n        className=\"card-img-top\"\n        style ={{height: '250px', width: '300px'}}\n      />\n      </div>\n      <p className=\"lead-para\">Some interesting facts about cat:</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\n\nconst Spinner = () => <div className=\"spinner-border text-danger\"></div>;\n\nexport default Spinner;\n","import React from \"react\";\n\nclass Form extends React.Component {\n  state = { number: 5 };\n\n  UponSubmit = e => {\n    e.preventDefault();\n    const { fetch } = this.props;\n\n    fetch (this.state.number);\n  };\n  \n  render() {\n    return (\n      <div className=\"form-group\">\n        <form  onSubmit={this.UponSubmit}>\n          <label className =\"question-fact\">How many Facts (2 - 10)?</label>\n          <div >\n          <div >\n          <input\n              className=\"col-type\"\n              type=\"number\"\n              value={this.state.number}\n              min=\"2\"\n              max=\"10\"\n              required={true}\n              onChange={event => this.setState({ number: event.target.value })}\n            />\n          </div>\n          <br/>\n          <div >\n          <button className = \"button-click\">            \n              Click me to generate new facts\n            </button>\n          </div>\n          \n            \n            \n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n\n// onSubmit={this.UponSubmit}\n","import React from 'react';\n\n\nconst Footer = () => {\n    return (\n        <div className=\"footer\"> Â© Created by Samikshya.\n        </div>\n    )\n\n}\nexport default Footer;","import React, { Component } from \"react\";\nimport Title from \"./components/Title\";\nimport \"./App.css\";\nimport Spinner from \"./components/Spinner\";\nimport Form from \"./components/Form\";\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      facts: [],\n      isLoaded: false\n    };\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  fetchData = (num = 5 ) => {\n    fetch(\n      `https://cat-fact.herokuapp.com/facts/random?animal_type=cat&amount=${num}`\n    )\n      .then(res => res.json())\n      .then(\n        json => {\n          this.setState({\n            isLoaded: true,\n            facts: json\n          });\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n\n  displayData = () => {\n    const { isLoaded, facts, error } = this.state; // object destructure\n    if (error) {\n      return (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          Error: {error.message}\n        </div>\n      );\n    } else if (!isLoaded) {\n      return (\n        <div>\n          {\" \"}\n          <Spinner />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          {facts.map(facts => (\n            <div className=\"fact-link\" key={facts._id}>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item list-group-item-primary\">\n                  {facts.text}\n                </li>\n                <li className=\"list-group-item list-group-item-secondary\">\n                  {`https://cat-fact.herokuapp.com/facts/${facts._id}`}\n                </li>\n              </ul>\n              \n            </div>\n          ))}\n        </div>\n      );\n    }\n  };\n  render() {\n    \n    return (\n      <div className=\"background\">\n        <div className=\"container-wall\">\n          <Title />\n          <Form fetch={this.fetchData}/> \n          \n          <div>{this.displayData()}</div>\n            \n        </div> \n          <Footer />\n            \n      </div>\n      \n       \n      \n    );\n  }\n}\nexport default App;\n\n// <div>\n//                  <button className=\"btn btn-primary\" onClick = {this.fetchData}>\n//                  Click here to generate new facts!\n//                   </button>\n//                  </div>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cat.ba74bd7b.png\";"],"sourceRoot":""}